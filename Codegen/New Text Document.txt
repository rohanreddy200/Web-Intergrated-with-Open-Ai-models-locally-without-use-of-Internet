Login.html:-<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form action="/login" method="POST">
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username"><br>
        <label for="password">Password:</label><br>
        <input type="password" id="password" name="password"><br><br>
        <input type="submit" value="Login">
    </form>
</body>
</html>

updated backend code:-
from flask import Flask, request, jsonify, render_template, redirect, url_for
import os
import torch
import sqlite3
from transformers import AutoModelForCausalLM, AutoTokenizer
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# Path to the directory containing the model and tokenizer files
try:
    tokenizer = AutoTokenizer.from_pretrained("Salesforce/codegen-350M-multi")
    print("Tokenizer loaded successfully!")
except Exception as e:
    print("Error loading tokenizer:", e)
    raise

try:
    model = AutoModelForCausalLM.from_pretrained("Salesforce/codegen-350M-multi")
    print("Model loaded successfully!")
except Exception as e:
    print("Error loading model:", e)
    raise

# Create SQLite database connection
conn = sqlite3.connect('chat_history.db')
c = conn.cursor()

# Create table to store chat history
c.execute('''CREATE TABLE IF NOT EXISTS chat_history
             (user_id TEXT, message TEXT)''')
conn.commit()

# Login route
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        # Add your authentication logic here, for example, checking credentials against a database
        # For simplicity, let's assume a hardcoded username and password
        if username == 'admin' and password == 'password':
            return redirect(url_for('chat'))
        else:
            return render_template('login.html', message='Invalid username or password')
    return render_template('login.html')

# Chat route
@app.route('/chat', methods=['GET', 'POST'])
def chat():
    # Add chat functionality here
    return "Chat functionality will be implemented here"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
